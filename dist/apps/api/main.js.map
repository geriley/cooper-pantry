{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"@nestjs/common\"","webpack:///external \"typeorm\"","webpack:///./libs/api-interfaces/src/index.ts","webpack:///external \"@nestjs/typeorm\"","webpack:///./apps/api/src/environments/environment.prod.ts","webpack:///external \"@nestjs/swagger\"","webpack:///./apps/api/src/app/entities/index.ts","webpack:///./apps/api/src/app/services/repository/index.ts","webpack:///./apps/api/src/app/services/resource/index.ts","webpack:///./apps/api/src/app/entities/user.entity.ts","webpack:///./apps/api/src/app/entities/address.entity.ts","webpack:///./apps/api/src/app/entities/pantry.entity.ts","webpack:///./apps/api/src/app/entities/survey-response.entity.ts","webpack:///./apps/api/src/app/services/resource/pantry-resource.service.ts","webpack:///./apps/api/src/app/services/resource/survey-responses.service.ts","webpack:///./apps/api/src/app/services/helper/index.ts","webpack:///./apps/api/src/app/services/twilio/twilio.service.ts","webpack:///./apps/api/src/app/entities/modules/user.module.ts","webpack:///./apps/api/src/app/entities/modules/address.module.ts","webpack:///./apps/api/src/app/services/repository/pantry-repo.service.ts","webpack:///./apps/api/src/app/services/repository/user-repo.service.ts","webpack:///./apps/api/src/app/services/helper/survey-score.service.ts","webpack:///./apps/api/src/app/services/resource/user-resource.service.ts","webpack:///./apps/api/src/app/common/base-resource.service.ts","webpack:///external \"twilio\"","webpack:///./apps/api/src/app/common/index.ts","webpack:///./apps/api/src/app/entities/modules/index.ts","webpack:///./apps/api/src/app/entities/modules/pantry.module.ts","webpack:///./apps/api/src/app/entities/modules/survey-response.module.ts","webpack:///./apps/api/src/app/services/repository/survey-responses-repo.service.ts","webpack:///./libs/api-interfaces/src/lib/api-interfaces.ts","webpack:///./libs/api-interfaces/src/lib/resource-types.enum.ts","webpack:///./libs/api-interfaces/src/lib/dto/index.ts","webpack:///./libs/api-interfaces/src/lib/dto/user.model.ts","webpack:///./libs/api-interfaces/src/lib/dto/survey-score.model.ts","webpack:///./libs/api-interfaces/src/lib/request-dto/index.ts","webpack:///external \"@nestjs/core\"","webpack:///./apps/api/src/app/app.module.ts","webpack:///external \"@nestjs/serve-static\"","webpack:///external \"path\"","webpack:///./apps/api/src/app/app.controller.ts","webpack:///external \"pg-connection-string\"","webpack:///./apps/api/src/app/controllers/modules/index.ts","webpack:///./apps/api/src/app/controllers/modules/pantry-http.module.ts","webpack:///./apps/api/src/app/controllers/pantry.controller.ts","webpack:///./apps/api/src/app/controllers/modules/survey-response-http.module.ts","webpack:///./apps/api/src/app/controllers/survey.controller.ts","webpack:///./apps/api/src/app/controllers/modules/communication-http.module.ts","webpack:///./apps/api/src/app/controllers/communication.controller.ts","webpack:///./apps/api/src/app/controllers/modules/user-http.module.ts","webpack:///./apps/api/src/app/controllers/user.controller.ts","webpack:///./apps/api/src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 56);\n","module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"typeorm\");","export * from './lib/api-interfaces';\n","module.exports = require(\"@nestjs/typeorm\");","export const environment = {\n  production: true\n};\n","module.exports = require(\"@nestjs/swagger\");","import { Pantry } from './pantry.entity';\r\nimport { SurveyResponse } from './survey-response.entity'\r\nimport { User } from './user.entity';\r\nimport { Address } from './address.entity';\r\n\r\nexport * from './modules';\r\n\r\nexport { Pantry } from './pantry.entity';\r\nexport { SurveyResponse } from './survey-response.entity';\r\nexport { User } from './user.entity';\r\n\r\nexport const entities = [\r\n    Pantry,\r\n    SurveyResponse,\r\n    Address,\r\n    User,\r\n];","export * from './pantry-repo.service';\r\nexport * from './survey-responses-repo.service';\r\nexport * from './user-repo.service';\r\n","export * from './pantry-resource.service';\r\nexport * from './survey-responses.service';\r\nexport * from './user-resource.service';\r\n","import { Column, Entity, JoinColumn, OneToOne, PrimaryColumn } from 'typeorm';\r\nimport { Address } from './address.entity';\r\n\r\n@Entity()\r\nexport class User {\r\n    // ID from Firebase\r\n    @PrimaryColumn()\r\n    public id: string;\r\n\r\n    @Column({ nullable: true })\r\n    public givenName: string;\r\n\r\n    @Column({ nullable: true })\r\n    public familyName: string;\r\n\r\n    @OneToOne(type => Address, { cascade: true })\r\n    @JoinColumn()\r\n    public residentialAddress?: Address;  \r\n\r\n    @Column({ nullable: true })\r\n    public mobilePhone: string;    \r\n\r\n    @Column()\r\n    public userRole: string;\r\n}","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Address {\r\n    @PrimaryGeneratedColumn()\r\n    public id: number;\r\n\r\n    @Column()\r\n    public address1: string;\r\n\r\n    @Column({ nullable: true })\r\n    public address2: string;\r\n\r\n    @Column()\r\n    public city: string;\r\n\r\n    @Column()\r\n    public state: string;\r\n\r\n    @Column()\r\n    public zipcode: string;\r\n}","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Pantry {\r\n    @PrimaryGeneratedColumn()\r\n    public id: number;\r\n\r\n    @Column()\r\n    public name: string;\r\n}","import { Column, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { User } from './user.entity';\r\n\r\n@Entity()\r\nexport class SurveyResponse {\r\n    @PrimaryGeneratedColumn()\r\n    public id: number;\r\n\r\n    @Column({ nullable: true })\r\n    public userId?: number;\r\n\r\n    @ManyToOne(type => User)\r\n    @JoinColumn({ name: 'userId', referencedColumnName: 'id'})\r\n    public user?: User;    \r\n\r\n    @Column('jsonb')\r\n    public response: any;\r\n}","import { Injectable } from \"@nestjs/common\";\r\nimport { PantryRepoService } from '../repository';\r\nimport { Pantry } from '../../entities';\r\nimport { IPantryDTO, IPayload, IPayloadData, CooperResourceType } from '@cooper/api-interfaces';\r\n\r\n@Injectable()\r\nexport class PantryResourceService {\r\n    constructor(\r\n        private pantryRepo: PantryRepoService\r\n    ) { }\r\n    \r\n    private readonly resourceType = CooperResourceType.Pantry;\r\n\r\n    public async get(): Promise<IPayload<IPantryDTO>> {\r\n        const pantries = await this.pantryRepo.findAll();\r\n        return {\r\n            data: pantries.map((p) => ({\r\n                type: this.resourceType,\r\n                id: p.id.toString(),\r\n                attributes: this.mapPantryEntityToResource(p)\r\n            }))\r\n        };\r\n    }\r\n\r\n    public async upsert(request: IPayload<IPantryDTO>): Promise<IPayload<IPantryDTO>> {\r\n        const data = Array.isArray(request.data) ? request.data : [request.data];\r\n        const createdEntities: Pantry[] = [];\r\n        for (const d of data.filter((de) => de !== undefined && de !== null)) {\r\n            const newResource: Pantry = {\r\n                id: d.id ? parseInt(d.id, 10) : undefined,\r\n                name: d.attributes.name,\r\n            };\r\n            const p = await this.pantryRepo.add(newResource);\r\n            createdEntities.push(p);\r\n        }\r\n        const mappedEntities: IPayloadData<IPantryDTO>[] = createdEntities.map((e) => ({\r\n            id: e.id.toString(),\r\n            type: this.resourceType,\r\n            attributes: this.mapPantryEntityToResource(e)\r\n        }));\r\n\r\n        return {\r\n            data: Array.isArray(request.data)\r\n                ? mappedEntities\r\n                : (mappedEntities.length === 1 ? mappedEntities[0] : undefined)\r\n        }\r\n    }\r\n\r\n    private mapPantryEntityToResource(pantry: Pantry): IPantryDTO {\r\n        return {\r\n            name: pantry.name\r\n        };\r\n    }\r\n\r\n}","import { CooperResourceType, IPayload, ISurveyScoreDTO } from '@cooper/api-interfaces';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { ITwilioAutopilotResponse } from '../../models';\r\nimport { SurveyScoreService } from '../helper';\r\nimport { ISurveyResponseCriteria } from '../interfaces';\r\nimport { SurveyResponseRepoService } from '../repository';\r\n\r\n@Injectable()\r\nexport class SurveyResponseResourceService {\r\n    constructor(private repo: SurveyResponseRepoService, private helper: SurveyScoreService) { }\r\n    public addBotSurveyResponse(response: string) {\r\n        const response2: ITwilioAutopilotResponse = JSON.parse(response);\r\n        const entity = { id: undefined, userId: parseInt(response2.twilio.chat.From, 10), response: response };\r\n        return this.repo.add(entity);\r\n    }\r\n\r\n    public async getScores(criteria: ISurveyResponseCriteria): Promise<IPayload<ISurveyScoreDTO>> {\r\n        const entities = await this.repo.findAll(criteria);\r\n        return {\r\n            data: entities.map((e) => {\r\n                const response: ITwilioAutopilotResponse = JSON.parse(e.response);\r\n                const task = Object.keys(response.twilio.collected_data)[0];\r\n                const answers = response.twilio.collected_data[task].answers;\r\n                const score = this.helper.calculate(task, answers);\r\n                return {\r\n                    type: CooperResourceType.SurveyResponse,\r\n                    id: e.id.toString(),\r\n                    attributes: {\r\n                        ...score\r\n                    },\r\n                    relationships: {\r\n                        'user': { id: e.userId.toString(), type: CooperResourceType.User }\r\n                    }\r\n                };\r\n            })\r\n        }\r\n    }\r\n}","export * from './survey-score.service';\r\n","import { Injectable } from '@nestjs/common';\r\nimport { environment } from '../../../environments/environment';\r\nimport * as twilio from 'twilio';\r\nimport { IAddBotRequestDTO } from '@cooper/api-interfaces';\r\nimport { Client } from 'twilio-chat';\r\nimport { WebhookListInstanceCreateOptions } from 'twilio/lib/rest/autopilot/v1/assistant/webhook';\r\n\r\ninterface TwilioChatTokenRequest {\r\n    identity: string;\r\n}\r\n\r\n@Injectable()\r\nexport class TwilioService {\r\n    public generateChatAccessToken(req: TwilioChatTokenRequest) {\r\n        const twilioAccountSid = environment.production ? process.env.TWILIO_ACCOUNT_SID : environment.twilioAccount;\r\n        const twilioApiKey = environment.production ? process.env.TWILIO_API_KEY : environment.twilioChatApiKey;\r\n        const twilioApiSecret = environment.production ? process.env.TWILIO_CHAT_API_SECRET : environment.twilioChatApiSecret;\r\n\r\n        const serviceSid = environment.production ? process.env.TWILIO_CHAT_SERVICE_SID : environment.twilioChatSid;\r\n\r\n        const chatGrant = new twilio.jwt.AccessToken.ChatGrant({\r\n            serviceSid: serviceSid,\r\n        });\r\n\r\n        const token = new twilio.jwt.AccessToken(twilioAccountSid, twilioApiKey, twilioApiSecret, { identity: req.identity });\r\n        token.addGrant(chatGrant);\r\n        return token.toJwt();\r\n    }\r\n\r\n    public async addBotToChannel(req: IAddBotRequestDTO): Promise<void> {\r\n        const twilioAccountSid = environment.production ? process.env.TWILIO_ACCOUNT_SID : environment.twilioAccount;\r\n        const twilioAuthToken = environment.production ? process.env.TWILIO_AUTH_TOKEN : environment.twilioAuthToken;\r\n        const serviceSid = environment.production ? process.env.TWILIO_CHAT_SERVICE_SID : environment.twilioChatSid;\r\n        const url = environment.production ? process.env.TWILIO_CHAT_AUTOPILOT_URL : environment.twilioChatAutopilotUrl;\r\n\r\n        const client = new twilio.Twilio(twilioAccountSid, twilioAuthToken);\r\n        const channel = await client.chat.services(serviceSid)\r\n            .channels(req.channelSid);\r\n        const list = await channel\r\n            .webhooks.list();\r\n        const hasWebhookAlready = list.some((i) => i.url === url);\r\n\r\n        client.chat.services(serviceSid)\r\n            .channels(req.channelSid)\r\n            .webhooks\r\n            .create({\r\n                configuration: {\r\n                    url: url,\r\n                    method: 'POST',\r\n                    filters: ['onMessageSent'],\r\n\r\n                },\r\n                type: 'webhook'\r\n            });\r\n\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { User } from '../user.entity';\r\nimport { AddressModule } from './address.module';\r\n\r\n@Module({\r\n    imports: [AddressModule, TypeOrmModule.forFeature([User])],\r\n    exports: [TypeOrmModule]\r\n  })\r\n  export class UserModule {}","import { Address } from '../address.entity';\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\n\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([Address])],\r\n    exports: [TypeOrmModule]\r\n  })\r\n  export class AddressModule {}","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Pantry } from '../../entities';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class PantryRepoService {\r\n    constructor(\r\n        @InjectRepository(Pantry)\r\n        private pantryRepo: Repository<Pantry>,\r\n    ) { }\r\n\r\n    public async findAll(): Promise<Pantry[]> {\r\n        return this.pantryRepo.find();\r\n    }\r\n\r\n    public async add(pantry: Pantry) {\r\n        return this.pantryRepo.save(pantry);\r\n    }\r\n}","import { User } from '../../entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class UserRepoService {\r\n    constructor(\r\n        @InjectRepository(User)\r\n        private userRepo: Repository<User>,\r\n    ) { }\r\n\r\n    public async getById(id: string): Promise<User> {\r\n        return this.userRepo.findOne(id, { relations: ['residentialAddress'] });\r\n    }\r\n\r\n    public async findAll(): Promise<User[]> {\r\n        return this.userRepo.find({ relations: ['residentialAddress'] });\r\n    }\r\n\r\n    public async add(pantry: User) {\r\n        return this.userRepo.save(pantry);\r\n    }\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { IAutopilotAnswers } from '../../models/autopilot.model';\r\nimport { SurveyTypeDTO, SurveyResultLevel, ISurveyScoreDTO } from '@cooper/api-interfaces';\r\n\r\nexport enum SurveyTask {\r\n    ShortFoodSecurityTask = 'short_fss_answers'\r\n}\r\n\r\n@Injectable()\r\nexport class SurveyScoreService {\r\n    public calculate(task: string, answers: IAutopilotAnswers): ISurveyScoreDTO {\r\n        switch(task) {\r\n            case SurveyTask.ShortFoodSecurityTask: {\r\n                return this.calcShortFormFSS(answers)\r\n            }\r\n            default: {\r\n                return { \r\n                    score: 0,\r\n                    surveyResultLevel: SurveyResultLevel.Info,\r\n                    surveyType: undefined,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private calcShortFormFSS(answers: IAutopilotAnswers): ISurveyScoreDTO {\r\n        const affirmativeAnswers = ['yes', 'often', 'sometimes'];\r\n        const shortFoodSecurityScore = [...Object.values(answers)].filter((a) => affirmativeAnswers.some((aa) => a.answer.toLowerCase())).length;\r\n        const taskAttributes: ISurveyScoreDTO = {\r\n            surveyType: SurveyTypeDTO.ShortFoodSecurity,\r\n            score: shortFoodSecurityScore,\r\n            surveyResultLevel: (shortFoodSecurityScore >= 5)\r\n                ? SurveyResultLevel.Critical\r\n                : (shortFoodSecurityScore >= 2 ? SurveyResultLevel.Warning\r\n                    : SurveyResultLevel.Info)\r\n        };\r\n        return taskAttributes;\r\n    }\r\n}","import { Injectable } from \"@nestjs/common\";\r\nimport { UserRepoService } from '../repository';\r\nimport { IPayload, IPayloadData, IUserDTO, CooperResourceType, ISurveyScoreDTO, IPayloadDataRelationship, UserRole } from '@cooper/api-interfaces';\r\nimport { ResourceServiceHelper } from '../../common';\r\nimport { User } from '../../entities';\r\nimport { IUserSearchCriteria } from '../interfaces';\r\nimport { SurveyResponseResourceService } from './survey-responses.service';\r\n\r\n\r\n@Injectable()\r\nexport class UserResourceService {\r\n    constructor(\r\n        private userRepo: UserRepoService,\r\n        private scoresService: SurveyResponseResourceService,\r\n        private helper: ResourceServiceHelper\r\n    ) { }\r\n\r\n    private readonly resourceType = CooperResourceType.User;\r\n\r\n    public async getById(id: string): Promise<IPayload<IUserDTO>> {\r\n        const user = await this.userRepo.getById(id);\r\n        return this.helper.mapToDTOPayload<User, IUserDTO>(\r\n            this.resourceType,\r\n            { entity: user, attributeMapper: (e) => this.mapEntityToResource(e) }\r\n        );\r\n    }\r\n\r\n    public async get(criteria: IUserSearchCriteria): Promise<IPayload<IUserDTO>> {\r\n        const users = await this.userRepo.findAll();\r\n        const userIds = users.map((u) => u.id);\r\n        const scoreRelationships = await this.scoresService.getScores({ userIds });\r\n        const score: { [userId: number]: number[] } = (scoreRelationships.data as IPayloadData<ISurveyScoreDTO>[]).map((s) => ({\r\n            id: s.id,\r\n            userId: (s.relationships['user'] as IPayloadDataRelationship).id\r\n        })).reduce((acc, next) => {\r\n            const userId = parseInt(next.userId, 10);\r\n            const curr = acc[userId];\r\n            return (curr)\r\n                ? { ...acc, [userId]: [...curr, next.id] }\r\n                : { ...acc, [userId]: [next.id] }\r\n        }, {});\r\n        const userData = this.helper.mapToDTOListPayload<User, IUserDTO>(\r\n            this.resourceType,\r\n            { entities: users, attributeMapper: (e) => this.mapEntityToResource(e) }\r\n        );\r\n\r\n        const dto = {\r\n            data: (userData.data as IPayloadData<IUserDTO>[]).map((ud) => this.helper.addRelationships(ud, {\r\n                ids: score[ud.id],\r\n                relationshipName: CooperResourceType.SurveyResponse,\r\n                relationshipType: CooperResourceType.SurveyResponse,\r\n            }))\r\n        };\r\n        if (criteria && criteria.include && criteria.include.some((i) => i === CooperResourceType.SurveyResponse)) {\r\n            return {\r\n                ...dto,\r\n                included: scoreRelationships.data as IPayloadData<ISurveyScoreDTO>[]\r\n            };\r\n        }\r\n        else return dto;\r\n    }\r\n\r\n    public async upsert(request: IPayload<IUserDTO>): Promise<IPayload<IUserDTO>> {\r\n        const data = Array.isArray(request.data) ? request.data : [request.data];\r\n        const requestData = data.filter(d => d !== undefined).map((d) => this.mapPayloadToEntity(d));\r\n        const addedEntities = await this.helper.addRequestedResources(requestData, (e) => {\r\n            return this.userRepo.getById(e?.id).then((u) => {\r\n                const addressId = u?.residentialAddress?.id;\r\n                e.residentialAddress = { ...e.residentialAddress, id: addressId };\r\n                return this.userRepo.add(e);\r\n            });            \r\n        });\r\n\r\n        return Array.isArray(request.data) ? this.helper.mapToDTOListPayload<User, IUserDTO>(\r\n            this.resourceType,\r\n            { entities: addedEntities, attributeMapper: (e) => this.mapEntityToResource(e) }\r\n        ) : this.helper.mapToDTOPayload<User, IUserDTO>(\r\n            this.resourceType,\r\n            { entity: addedEntities[0], attributeMapper: (e) => this.mapEntityToResource(e) }\r\n        );\r\n    }\r\n\r\n\r\n    private mapPayloadToEntity(data: IPayloadData<IUserDTO>): User {\r\n        return {\r\n            id: data.id ? data.id : undefined,\r\n            givenName: data.attributes.firstName,\r\n            familyName: data.attributes.lastName,\r\n            userRole: data.attributes.userRole,\r\n            residentialAddress: {\r\n                id: undefined,\r\n                zipcode: data?.attributes?.address?.zipcode,\r\n                address1: data?.attributes?.address?.address1,\r\n                address2: data?.attributes?.address?.address2,\r\n                city: data?.attributes?.address?.city,\r\n                state: data?.attributes?.address?.state,\r\n            },\r\n            mobilePhone: data?.attributes?.mobilePhone,\r\n        };\r\n    }\r\n\r\n    private mapEntityToResource(e: User): IUserDTO {\r\n        return {\r\n            firstName: e.givenName,\r\n            lastName: e.familyName,\r\n            address: {\r\n                zipcode: e?.residentialAddress?.zipcode,\r\n                address1: e?.residentialAddress?.address1,\r\n                address2: e?.residentialAddress?.address2,\r\n                city: e?.residentialAddress?.city,\r\n                state: e?.residentialAddress?.state,\r\n            },\r\n            userRole: e.userRole as UserRole,\r\n            mobilePhone: e?.mobilePhone\r\n        };\r\n    }\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { IPayload, IPayloadData, CooperResourceType } from '@cooper/api-interfaces';\r\nimport { IPayloadDataRelationship } from '../../../../../libs/api-interfaces/src/lib/dto/payload.model';\r\n\r\nexport interface IRelationships {\r\n    relationshipName: string;\r\n    relationshipType: CooperResourceType;\r\n    ids: number[];\r\n}\r\n\r\n@Injectable()\r\nexport class ResourceServiceHelper {\r\n    public mapToDTOListPayload<Entity extends { id: number | string }, Resource>(resourceType: string,\r\n        {\r\n            entities,\r\n            attributeMapper\r\n        }: {\r\n            entities: Entity[],\r\n            attributeMapper: (entity: Entity) => Resource\r\n        }): IPayload<Resource> {\r\n        return {\r\n            data: entities\r\n                .filter((e) => e !== undefined)\r\n                .map((entity) => ({\r\n                    id: entity.id.toString(),\r\n                    type: resourceType,\r\n                    attributes: attributeMapper(entity)\r\n                }))\r\n        };\r\n    }\r\n\r\n    public mapToDTOPayload<Entity extends { id: number | string }, Resource>(resourceType: string, {\r\n        entity,\r\n        attributeMapper\r\n    }: {\r\n        entity: Entity,\r\n        attributeMapper: (entity: Entity) => Resource\r\n    }): IPayload<Resource> {\r\n        return {\r\n            data: entity ? {\r\n                id: entity.id.toString(),\r\n                type: resourceType,\r\n                attributes: attributeMapper(entity)\r\n            } : undefined,\r\n        };\r\n    }\r\n\r\n    public addRelationships<R>(resource: IPayloadData<R>, relationships: IRelationships): IPayloadData<R> {\r\n        if (relationships && relationships.ids && relationships.ids.length > 0) {\r\n            return {\r\n                ...resource,\r\n                relationships: {\r\n                    ...resource.relationships,\r\n                    [relationships.relationshipName]: relationships.ids.length > 0 ? { id: relationships.ids[0].toString(), type: relationships.relationshipType } : [\r\n                        ...relationships.ids.map((id) => ({ id: id.toString(), type: relationships.relationshipType }))\r\n                    ]\r\n                }\r\n\r\n            }\r\n        } else return { ...resource };\r\n    }\r\n\r\n    public async addRequestedResources<T extends { id: number | string }>(request: T | T[], addMethod: (e: T) => Promise<T>) {\r\n        const data = Array.isArray(request) ? request : [request];\r\n        const entities: T[] = [];\r\n        for (const d of data.filter((de) => de !== undefined && de !== null)) {\r\n            const p = await addMethod(d);\r\n            entities.push(p);\r\n        }\r\n        return entities;\r\n    }\r\n}","module.exports = require(\"twilio\");","export * from './base-resource.service';\r\n","export * from './pantry.module';\r\nexport * from './survey-response.module';\r\nexport * from './user.module';\r\nexport * from './address.module';\r\n","import { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { Module } from '@nestjs/common';\r\nimport { Pantry } from '../pantry.entity';\r\n\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([Pantry])],\r\n    exports: [TypeOrmModule]\r\n  })\r\n  export class PantryModule {}","import { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { Module } from '@nestjs/common';\r\nimport { SurveyResponse } from '../survey-response.entity';\r\n\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([SurveyResponse])],\r\n    exports: [TypeOrmModule]\r\n  })\r\n  export class SurveyResponseModule {}","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, In } from 'typeorm';\r\nimport { SurveyResponse } from '../../entities';\r\nimport { ISurveyResponseCriteria } from '../interfaces';\r\n\r\n@Injectable()\r\nexport class SurveyResponseRepoService {\r\n    constructor(\r\n        @InjectRepository(SurveyResponse)\r\n        private pantryRepo: Repository<SurveyResponse>,\r\n    ) { }\r\n\r\n    public async findAll(criteria: ISurveyResponseCriteria): Promise<SurveyResponse[]> {\r\n        if (criteria.userIds) {\r\n            return this.pantryRepo.find({\r\n                where: {\r\n                    userId: In(criteria.userIds)\r\n                }\r\n            });\r\n        } else return this.pantryRepo.find();\r\n    }\r\n\r\n    public async add(pantry: SurveyResponse) {\r\n        return this.pantryRepo.save(pantry);\r\n    }\r\n}","export * from './resource-types.enum';\nexport * from './dto';\nexport * from './request-dto';\n","export enum CooperResourceType {\r\n    Pantry = 'pantry',\r\n    SurveyResponse = 'survey-response',\r\n    User = 'user',\r\n}","export * from './payload.model';\r\nexport * from './pantry.model';\r\nexport * from './user.model';\r\nexport * from './survey-score.model';\r\nexport * from './address.model';\r\n","import { IAddress } from './address.model';\r\n\r\nexport enum UserRole {\r\n    PantryAdmin = 'PANTRY ADMIN',\r\n    Customer = 'CUSTOMER'\r\n}\r\n\r\nexport interface IUserDTO {\r\n    firstName: string;\r\n    lastName: string;\r\n    address?: IAddress,\r\n    userRole: UserRole;\r\n    mobilePhone?: string;\r\n}","export enum SurveyTypeDTO {\r\n    ShortFoodSecurity,\r\n}\r\n\r\nexport enum SurveyResultLevel {\r\n    Info,\r\n    Warning,\r\n    Critical,\r\n}\r\n\r\nexport interface ISurveyScoreDTO {\r\n    surveyType: SurveyTypeDTO;\r\n    score: number;\r\n    surveyResultLevel: SurveyResultLevel;\r\n}","export * from './add-bot-dto.interface';\r\n","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport { AppController } from './app.controller';\nimport * as PostgressConnectionStringParser from \"pg-connection-string\";\nimport { entities } from './entities';\nimport { controllerModules } from './controllers/modules';\nimport { ConfigModule } from '@nestjs/config';\n\nconst databaseUrl: string = process.env.DATABASE_URL;\nconst connectionOptions = databaseUrl ? PostgressConnectionStringParser.parse(databaseUrl) : undefined;\n\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'pantry'),\n      exclude: ['/api*']\n    }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: connectionOptions ? connectionOptions.host : 'localhost',\n      port: connectionOptions ? parseInt(connectionOptions.port, 10) : 5432,\n      username: connectionOptions ? connectionOptions.user : 'postgres',\n      password: connectionOptions ? connectionOptions.password : 'demo',\n      database: connectionOptions ? connectionOptions.database : 'cooper-pantry',\n      entities: [\n        ...entities,\n      ],\n      synchronize: true,\n    }),\n    ...controllerModules,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule { }\n","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"path\");","import { Controller, Get } from '@nestjs/common';\n\n\n@Controller()\nexport class AppController {\n\n  @Get('hello')\n  getData() {\n    return { message: 'hello' }\n  }\n}\n","module.exports = require(\"pg-connection-string\");","import { PantryHttpModule } from './pantry-http.module';\r\nimport { SurveyResponseHttpModule } from './survey-response-http.module';\r\nimport { CommunicationHttpModule } from './communication-http.module';\r\nimport { UserHttpModule } from './user-http.module';\r\n\r\nexport const controllerModules = [\r\n    PantryHttpModule,\r\n    SurveyResponseHttpModule,\r\n    CommunicationHttpModule,\r\n    UserHttpModule\r\n];","import { Module } from '@nestjs/common';\r\nimport { PantryModule } from '../../entities';\r\nimport { PantryResourceService } from '../../services/resource';\r\nimport { PantriesController } from '../pantry.controller';\r\nimport { PantryRepoService } from '../../services/repository/pantry-repo.service';\r\n\r\n@Module({\r\n    imports: [PantryModule],\r\n    providers: [PantryResourceService, PantryRepoService],\r\n    controllers: [PantriesController]\r\n})\r\nexport class PantryHttpModule { }","import { Controller, Get, Post, Body } from '@nestjs/common';\r\nimport { PantryResourceService } from '../services/resource/pantry-resource.service';\r\nimport { IPantryDTO, IPayload } from '@cooper/api-interfaces';\r\nimport { ApiBody } from '@nestjs/swagger';\r\n\r\n@Controller('pantries')\r\nexport class PantriesController {\r\n    constructor(private service: PantryResourceService) { }\r\n\r\n    @Get()\r\n    public async get(): Promise<IPayload<IPantryDTO>> {\r\n        try {\r\n            return this.service.get();\r\n        } catch (err) {\r\n            return {\r\n                errors: [{\r\n                    status: '500',\r\n                    title: 'Failed to fetch pantries.'\r\n                }]\r\n            };\r\n        }\r\n    }\r\n\r\n    @Post()\r\n    @ApiBody({})\r\n    public async post(@Body() pantry: IPayload<IPantryDTO>): Promise<IPayload<IPantryDTO>> {\r\n        try {\r\n            return this.service.upsert(pantry);\r\n        } catch (err) {\r\n            return {\r\n                errors: [{\r\n                    status: '500',\r\n                    title: 'Failed to fetch pantries.'\r\n                }]\r\n            };\r\n        }\r\n    }\r\n}","import { Module } from '@nestjs/common';\r\nimport { SurveyResponseModule } from '../../entities';\r\nimport { SurveyResponseRepoService } from '../../services/repository';\r\nimport { SurveyResponseResourceService } from '../../services/resource';\r\nimport { SurveyResponsesController } from '../survey.controller';\r\nimport { SurveyScoreService } from '../../services/helper';\r\n\r\n@Module({\r\n    imports: [SurveyResponseModule],\r\n    providers: [SurveyResponseRepoService, SurveyResponseResourceService, SurveyScoreService],\r\n    controllers: [SurveyResponsesController]\r\n})\r\nexport class SurveyResponseHttpModule { }","import { IPayload, ISurveyScoreDTO } from '@cooper/api-interfaces';\r\nimport { Body, Controller, Get, Post } from '@nestjs/common';\r\nimport { ApiBody } from '@nestjs/swagger';\r\nimport { SurveyResponseResourceService } from '../services/resource';\r\n\r\n@Controller('survey-responses')\r\nexport class SurveyResponsesController {\r\n    constructor(private service: SurveyResponseResourceService) { }\r\n\r\n    @Post()\r\n    @ApiBody({})\r\n    public async post(@Body() response: { Memory: string }): Promise<{ actions: any[] }> {\r\n        console.log(response);\r\n        this.service.addBotSurveyResponse(response.Memory);\r\n        return Promise.resolve({\r\n            actions: [\r\n                {\r\n                    redirect: {\r\n                        uri: \"task://complete_survey\"\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    @Get()\r\n    public get(): Promise<IPayload<ISurveyScoreDTO>> {\r\n        return this.service.getScores({ });\r\n    }\r\n}","import { TwilioService } from '../../services/twilio/twilio.service';\r\nimport { CommunicationsController } from '../communication.controller';\r\nimport { Module } from '@nestjs/common';\r\n\r\n@Module({\r\n    providers: [TwilioService],\r\n    controllers: [CommunicationsController]\r\n})\r\nexport class CommunicationHttpModule { }","import { Controller, Post, Body } from '@nestjs/common';\r\nimport { TwilioService } from '../services/twilio/twilio.service';\r\nimport { IAddBotRequestDTO } from '@cooper/api-interfaces';\r\nimport { ApiBody } from '@nestjs/swagger';\r\n\r\n@Controller('communications')\r\nexport class CommunicationsController {\r\n    constructor(private twilioService: TwilioService) { }\r\n    @Post('chatAccessToken')\r\n    public getChatAccessToken(@Body() req: { identity: string }): { jwt: string } {\r\n        return {\r\n            jwt: this.twilioService.generateChatAccessToken(req)\r\n        };\r\n    }\r\n\r\n    @Post('addBot')\r\n    @ApiBody({})\r\n    public async addChatBot(@Body() req: IAddBotRequestDTO): Promise<void> {\r\n        await this.twilioService.addBotToChannel(req);\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ResourceServiceHelper } from '../../common/base-resource.service';\r\nimport { SurveyResponseModule } from '../../entities';\r\nimport { UserModule } from '../../entities/modules/user.module';\r\nimport { SurveyScoreService } from '../../services/helper/survey-score.service';\r\nimport { SurveyResponseRepoService } from '../../services/repository';\r\nimport { UserRepoService } from '../../services/repository/user-repo.service';\r\nimport { SurveyResponseResourceService } from '../../services/resource';\r\nimport { UserResourceService } from '../../services/resource/user-resource.service';\r\nimport { UserController } from '../user.controller';\r\n\r\n@Module({\r\n    imports: [UserModule, SurveyResponseModule],\r\n    providers: [UserResourceService, UserRepoService, ResourceServiceHelper, SurveyResponseResourceService, SurveyResponseRepoService, SurveyScoreService],\r\n    controllers: [UserController]\r\n})\r\nexport class UserHttpModule { }","import { IPayload, ISurveyScoreDTO, IUserDTO } from '@cooper/api-interfaces';\r\nimport { Body, Controller, Get, NotFoundException, Param, Post, Put, Query } from '@nestjs/common';\r\nimport { ApiBody, ApiParam, ApiQuery } from '@nestjs/swagger';\r\nimport { UserResourceService } from '../services/resource';\r\n\r\n@Controller('users')\r\nexport class UserController {\r\n    constructor(private service: UserResourceService) { }\r\n\r\n    @Get(':id')\r\n    @ApiParam({ name: 'id' })\r\n    public async getById(@Param() params: { id: string }): Promise<IPayload<IUserDTO>> {\r\n        try {\r\n            const user = await this.service.getById(params.id);\r\n            if (!user.data) {\r\n                throw new NotFoundException({\r\n                    errors: [\r\n                        {\r\n                            status: '404',\r\n                            title: 'Not Found'\r\n                        }\r\n                    ]\r\n                });\r\n            } else {\r\n                return user;\r\n            }\r\n        } catch (err) {\r\n            if (err && err.message && err.message.errors) {\r\n                return err.message;\r\n            }\r\n            return {\r\n                errors: [{\r\n                    status: '500',\r\n                    title: 'Failed to fetch user.'\r\n                }]\r\n            };\r\n        }\r\n    }\r\n\r\n    @Get()\r\n    @ApiQuery({ name: 'include' })\r\n    public async get(@Query() params: { include: string }): Promise<IPayload<IUserDTO>> {\r\n        try {\r\n            return this.service.get({\r\n                include: params && params.include ? params.include.split(',') as any : []\r\n            });\r\n        } catch (err) {\r\n            return {\r\n                errors: [{\r\n                    status: '500',\r\n                    title: 'Failed to fetch users.'\r\n                }]\r\n            };\r\n        }\r\n    }\r\n\r\n    @Post()\r\n    @ApiBody({})\r\n    public async post(@Body() pantry: IPayload<IUserDTO>): Promise<IPayload<IUserDTO>> {\r\n        try {\r\n            console.log(pantry);\r\n            return this.service.upsert(pantry);\r\n        } catch (err) {\r\n            return {\r\n                errors: [{\r\n                    status: '500',\r\n                    title: 'Failed to post users.'\r\n                }]\r\n            };\r\n        }\r\n    }\r\n\r\n    @Put(':id')\r\n    @ApiParam({ name: 'id' })\r\n    @ApiBody({})\r\n    public async put(@Body() pantry: IPayload<IUserDTO>): Promise<IPayload<IUserDTO>> {\r\n        try {\r\n            return this.service.upsert(pantry);\r\n        } catch (err) {\r\n            return {\r\n                errors: [{\r\n                    status: '500',\r\n                    title: 'Failed to update users.'\r\n                }]\r\n            };\r\n        }\r\n    }\r\n\r\n    @Get('survey-scores')\r\n    public async getUserSurveys(): Promise<IPayload<ISurveyScoreDTO>> {\r\n        throw Error();\r\n    }\r\n\r\n}","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { NestFactory } from '@nestjs/core';\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.enableCors();\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  const options = new DocumentBuilder()\n    .setTitle('Cooper Pantry')\n    .setDescription('Cooper Pantry API Documentation')\n    .setVersion('1.0')\n    .build();\n  const document = SwaggerModule.createDocument(app, options);\n  SwaggerModule.setup('api', app, document);\n  await app.listen(port, () => {\n    console.log('Listening at http://localhost:' + port + '/' + globalPrefix);\n  });\n}\n\nbootstrap();\n"],"sourceRoot":""}